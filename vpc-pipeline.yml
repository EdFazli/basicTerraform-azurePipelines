variables:
  - group: COMMON Variables
  - group: VPC Variables

trigger:
  branches:
    include:
    - main
    exclude:
      - README.md
  
stages:
  - stage: Validate
    displayName: Validate
    jobs:
    - job: init
      displayName: Terraform validate
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'terraform init -no-color'
          workingDirectory: '$(build.sourcesdirectory)/Terraform'
        displayName: Terraform init
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'pip install checkov'
        displayName: Install checkov
      - task: PowerShell@2
        inputs:
          filePath: 'listWorkspaces.ps1'
          arguments: '-CommaSeparatedListofWorkspaces "$(CommaSeparatedListofWorkspaces)"'
        displayName: Terraform validate
      - task: Bash@3
        inputs:
          targetType: 'inline'
          workingDirectory: $(System.DefaultWorkingDirectory)
          script: 'checkov -d . -o junitxml > scan-result.xml'
        displayName: Checkov source code scan
        continueOnError: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          testResultsFiles: '**/*scan-result.xml'
          mergeTestResults: false
          testRunTitle: Terraform source code scan
          failTaskOnFailedTests: false
          publishRunAttachments: true
        displayName: Publish Test Result

  - stage: SIT
    displayName: SIT
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform plan
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'pip install checkov'
          displayName: Install checkov
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: Terraform init
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform workspace select SIT -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform workspace: SIT"
        - task: PowerShell@2
          inputs:  
            targetType: 'inline'
            script: 'terraform plan -target="module.$(var.module)" -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) -out main.tfplan -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform plan"
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: $(System.DefaultWorkingDirectory)            
            script: |
                    terraform show -json main.tfplan > main.json
                      checkov -f main.json -o junitxml > Checkov-Plan-Report.xml
          continueOnError: true
          displayName: Checkov plan scan
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            testResultsFiles: '**/*Checkov-Plan-Report.xml'
            mergeTestResults: false
            testRunTitle: Checkov SIT workspace plan scan
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: Publish Test Result
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 15 # task times out in 15 mins
          inputs:
            notifyUsers: edfazli92@gmail.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform apply
        steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: Terraform init
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform workspace select SIT -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform workspace: SIT"
        - task: PowerShell@2
          inputs:  
            targetType: 'inline'
            script: 'terraform apply -target="module.$(var.module)" -var region=$(var.region) -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) --auto-approve -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform apply"
  - stage: UAT
    displayName: UAT
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform plan
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'pip install checkov'
          displayName: Install checkov
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: Terraform init
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform workspace select UAT -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform workspace: UAT"
        - task: PowerShell@2
          inputs:  
            targetType: 'inline'
            script: 'terraform plan -target="module.$(var.module)" -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) -out main.tfplan -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform plan"
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: $(System.DefaultWorkingDirectory)            
            script: |
                    terraform show -json main.tfplan > main.json
                      checkov -f main.json -o junitxml > Checkov-Plan-Report.xml
          continueOnError: true
          displayName: Checkov plan scan
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            testResultsFiles: '**/*Checkov-Plan-Report.xml'
            mergeTestResults: false
            testRunTitle: Checkov UAT workspace plan scan
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: Publish Test Result
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15 # task times out in 15 mins
            inputs:
              notifyUsers: edfazli92@gmail.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
            vmImage: ubuntu-latest
        displayName: Terraform apply
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: Terraform init
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform workspace select UAT -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform workspace: UAT"
          - task: PowerShell@2
            inputs:  
              targetType: 'inline'
              script: 'terraform apply -target="module.$(var.module)" -var region=$(var.region) -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) --auto-approve -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform apply"
  - stage: PROD
    displayName: PROD
    jobs:
      - job: plan
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform plan
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'pip install checkov'
          displayName: Install checkov
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: Terraform init
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: 'terraform workspace select PROD -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform workspace: PROD"
        - task: PowerShell@2
          inputs:  
            targetType: 'inline'
            script: 'terraform plan -target="module.$(var.module)" -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) -out main.tfplan -no-color'
            workingDirectory: '$(build.sourcesdirectory)/Terraform'
          displayName: "Terraform plan"
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: $(System.DefaultWorkingDirectory)            
            script: |
                    terraform show -json main.tfplan > main.json
                      checkov -f main.json -o junitxml > Checkov-Plan-Report.xml
          continueOnError: true
          displayName: Checkov plan scan
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            testResultsFiles: '**/*Checkov-Plan-Report.xml'
            mergeTestResults: false
            testRunTitle: Checkov PROD workspace plan scan
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: Publish Test Result
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15 # task times out in 15 mins
            inputs:
              notifyUsers: edfazli92@gmail.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
            vmImage: ubuntu-latest
        displayName: Terraform apply
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: Terraform init
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform workspace select PROD -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform workspace: PROD"
          - task: PowerShell@2
            inputs:  
              targetType: 'inline'
              script: 'terraform apply -target="module.$(var.module)" -var region=$(var.region) -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) --auto-approve -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform apply"
  - stage: PROD_SYDNEY
    displayName: PROD_SYDNEY
    jobs:
      - job: plan
        pool:
            vmImage: ubuntu-latest
        displayName: Terraform plan
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'pip install checkov'
            displayName: Install checkov
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: Terraform init
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform workspace select PROD_SYDNEY -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform workspace: PROD_SYDNEY"
          - task: PowerShell@2
            inputs:  
              targetType: 'inline'
              script: 'terraform plan -target="module.$(var.module)" -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) -out main.tfplan -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform plan"
          - task: Bash@3
            inputs:
              targetType: 'inline'
              workingDirectory: $(System.DefaultWorkingDirectory)            
              script: |
                      terraform show -json main.tfplan > main.json
                        checkov -f main.json -o junitxml > Checkov-Plan-Report.xml
            continueOnError: true
            displayName: Checkov plan scan
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              testResultsFiles: '**/*Checkov-Plan-Report.xml'
              mergeTestResults: false
              testRunTitle: Checkov PROD_SYDNEY workspace plan scan
              failTaskOnFailedTests: false
              publishRunAttachments: true
            displayName: Publish Test Result
      - job: approve
        dependsOn: plan
        condition: and (succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: server
        displayName: Wait for approval
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15 # task times out in 15 mins
            inputs:
              notifyUsers: edfazli92@gmail.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'reject'
      - job: apply
        dependsOn: approve
        pool:
          vmImage: ubuntu-latest
        displayName: Terraform apply
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform -chdir=/Terraform init -backend-config=backend.tf -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: Terraform init
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'terraform workspace select PROD_SYDNEY -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform workspace: PROD_SYDNEY"
          - task: PowerShell@2
            inputs:  
              targetType: 'inline'
              script: 'terraform apply -target="module.$(var.module)" -var region=$(var.region) -var access_key=$(var.access_key) -var secret_key=$(var.secret_key) --auto-approve -no-color'
              workingDirectory: '$(build.sourcesdirectory)/Terraform'
            displayName: "Terraform apply"